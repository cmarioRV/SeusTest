// This file has been autogenerated from a class added in the UI designer.

using System;
using demoseusapp.iOS.Platform;
using demoseusapp.ViewModels;
using UIKit;

namespace demoseusapp.iOS
{
    public partial class DetailViewController : UIViewController
	{
        private SeusViewModel detailViewModel;
        private bool thereWasAnError;

        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
        public string CaduceIn { get; set; }

        public DetailViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            updateButton.TouchUpInside += UpdateButton_TouchUpInside;
            hideLoadingViewButton.TouchUpInside += HideLoadingViewButton_TouchUpInside;

            detailViewModel = new SeusViewModel(new Storage());
            detailViewModel.PropertyChanged += IsBusy_PropertyChanged;

            accessTokenLabel.Text = AccessToken;
            refreshTokenLabel.Text = RefreshToken;
            caduceTimeLabel.Text = CaduceIn;

            nameLabel.Text = string.Empty;
            dniLabel.Text = string.Empty;
            emailLabel.Text = string.Empty;
        }

        private void HideLoadingViewButton_TouchUpInside(object sender, EventArgs e)
        {
            InvokeOnMainThread(() =>
            {
                loadingView.Hidden = true;
            });
        }

        private void UpdateButton_TouchUpInside(object sender, EventArgs e)
        {
            detailViewModel.GetInfoActionCommand.Execute(null);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            detailViewModel.GetInfoActionCommand.Execute(null);
        }

        void IsBusy_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            var propertyName = e.PropertyName;
            switch (propertyName)
            {
                case nameof(detailViewModel.IsBusy):
                    {
                        InvokeOnMainThread(() =>
                        {
                            if (detailViewModel.IsBusy)
                            {
                                activityIndicatorView.StartAnimating();
                                activityIndicatorView.Hidden = false;
                                loadingView.Hidden = false;
                                hideLoadingViewButton.Hidden = true;
                            }
                            else
                            {
                                activityIndicatorView.StopAnimating();
                                loadingView.Hidden = !thereWasAnError;
                                hideLoadingViewButton.Hidden = !thereWasAnError;
                            }
                        });
                    }
                    break;
                case nameof(detailViewModel.AccessToken):
                    {
                        InvokeOnMainThread(() =>
                        {
                            accessTokenLabel.Text = detailViewModel.AccessToken;
                        });
                    }
                    break;
                case nameof(detailViewModel.RefreshToken):
                    {
                        InvokeOnMainThread(() =>
                        {
                            refreshTokenLabel.Text = detailViewModel.RefreshToken;
                        });
                    }
                    break;
                case nameof(detailViewModel.ValidTime):
                    {
                        InvokeOnMainThread(() =>
                        {
                            caduceTimeLabel.Text = detailViewModel.ValidTime;
                        });
                    }
                    break;
                case nameof(detailViewModel.Name):
                    {
                        InvokeOnMainThread(() =>
                        {
                            nameLabel.Text = detailViewModel.Name;
                        });
                    }
                    break;
                case nameof(detailViewModel.Dni):
                    {
                        InvokeOnMainThread(() =>
                        {
                            dniLabel.Text = detailViewModel.Dni;
                        });
                    }
                    break;
                case nameof(detailViewModel.Email):
                    {
                        InvokeOnMainThread(() =>
                        {
                            emailLabel.Text = detailViewModel.Email;
                        });
                    }
                    break;
                case nameof(detailViewModel.UserMsg):
                    {
                        InvokeOnMainThread(() =>
                        {
                            msgLabel.Text = detailViewModel.UserMsg;
                        });
                    }
                    break;
                case nameof(detailViewModel.ThereWasAnError):
                    {
                        InvokeOnMainThread(() =>
                        {
                            thereWasAnError = detailViewModel.ThereWasAnError;
                        });
                    }
                    break;
            }
        }
    }
}
